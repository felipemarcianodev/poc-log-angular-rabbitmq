input {
  http {
    port => 5044
    codec => json
    cors => {
      allow_origin => ["*"]
      allow_methods => ["POST", "OPTIONS"]
      allow_headers => ["Content-Type", "Authorization"]
    }
  }
}

filter {
  # Adiciona timestamp se não existir
  if ![timestamp] {
    mutate {
      add_field => { "timestamp" => "%{@timestamp}" }
    }
  }

  # Parse do timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }

  # Adiciona informações geográficas baseado no IP (opcional)
  if [clientip] {
    geoip {
      source => "clientip"
      target => "geoip"
    }
  }

  # Enriquece dados do user agent
  useragent {
    source => "userAgent"
    target => "ua"
  }

  # Categoriza eventos críticos
  if [event] == "APPLICATION_ERROR" {
    mutate {
      add_field => { "severity" => "error" }
      add_tag => ["critical"]
    }
  } else if [event] == "PURCHASE_COMPLETED" {
    mutate {
      add_field => { "severity" => "info" }
      add_tag => ["business_critical"]
    }
  } else {
    mutate {
      add_field => { "severity" => "info" }
    }
  }

  # Remove campos desnecessários
  mutate {
    remove_field => ["headers", "host"]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "user-logs-%{+YYYY.MM.dd}"
    
    # Template personalizado
    template_name => "user-logs"
    template_pattern => "user-logs-*"
    template => {
      "mappings" => {
        "properties" => {
          "timestamp" => { "type" => "date" }
          "userId" => { "type" => "keyword" }
          "sessionId" => { "type" => "keyword" }
          "event" => { "type" => "keyword" }
          "page" => { "type" => "keyword" }
          "severity" => { "type" => "keyword" }
          "data" => { "type" => "object" }
          "ua" => {
            "properties" => {
              "browser" => { "type" => "keyword" }
              "os" => { "type" => "keyword" }
              "device" => { "type" => "keyword" }
            }
          }
        }
      }
    }
  }

  # Debug output (remover em produção)
  stdout {
    codec => rubydebug
  }
}